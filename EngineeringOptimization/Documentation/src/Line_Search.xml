<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="Line_Search"
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xl="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	version="5">
	<title>Line Search &#x2014; Project 1</title>
	<titleabbrev>Line Search</titleabbrev>
	<para><xref linkend="pr_1_screenshot_assignment"/> and
		<xref linkend="pr_1_screenshot_flow_chart"/> below show our first
		project	as assigned by Dr. Mohamed El-Sayed.</para>
	<figure xml:id="pr_1_screenshot_assignment">
		<title>Project 1 Assignment</title>
			<screenshot>
				<mediaobject>
					<imageobject role="html">
						<imagedata
							fileref="mout/pr_1_screenshot_assignment.png"/>
					</imageobject>
					<imageobject role="fo">
						<imagedata contentwidth="5in"
							fileref="mout/pr_1_screenshot_assignment.png"/>
					</imageobject>
					<textobject>
						<phrase>Project 1: (25% of class grade) due 6th week
							Develop	a single variable unconstrained minimization
							routine	using the bounding-golden section-quad fit
							chart developed in class. Test the program using
							first (a) F(x)=(x-10)^2 (b) *2nd use the program to
							solve the example 2-1 problem Required: (1) The
							program (2) Documentation of all the variables and
							flowcharts (3) The output of the 2 problems (test
							cases)</phrase>
					</textobject>
				</mediaobject>
			</screenshot>
		<caption>
			<para>This is a video screen capture from the beginning of the
				third session showing our line search assignment.</para>
		</caption>
	</figure>
	<figure xml:id="pr_1_screenshot_flow_chart">
		<title>Project 1 Flowchart</title>
		<screenshot>
			<mediaobject>
				<imageobject role="html">
					<imagedata fileref="mout/pr_1_screenshot_flow_chart.png"/>
				</imageobject>
				<imageobject role="fo">
					<imagedata contentwidth="5in"
						fileref="mout/pr_1_screenshot_flow_chart.png"/>
				</imageobject>
				<textobject>
					<phrase>This diagram is a code flowchart for the Project 1
						routine for finding a bounded minimum.</phrase>
				</textobject>
			</mediaobject>
		</screenshot>
		<caption>
			<para>This video screen capture contains the flowchart that goes
				with the first capture in this session. It references
				two figures in <olink targetdoc="self" targetptr="GNVNOTED"/>.
				Figure 2-11 contains a method for bounding a minimum. Figure 2-8
				details a four point golden section method. The chart directs
				us to bound the minimum, perform the golden section method,
				and then to curve fit the point for the last evaluation, while
				keeping	track of all function evaluations.</para>
		</caption>
	</figure>
	<para>As <xref linkend="pr_1_screenshot_assignment"/> shows, I am to create
		a procedure for solving single-variable unconstrained minimization
		problems. This is also referred to as a line search, since there is
		only one independant variable.</para>
	<para><xref linkend="Description_of_Line_Search"/> outlines my
		routine. I use the routine to solve the requested problems in
		<xref linkend="Line_Search_Problems"/>.</para>
	<section xml:id="Description_of_Line_Search">
		<title>Description of Line Search</title>
		<para>In order to satisfy constraints in later assignments, I
			eventually implemented a slightly different routine than that
			recommended in <xref linkend="pr_1_screenshot_flow_chart"/>.
			The reason for this is that the routine from the class notes does
			not provide for	convergence to a given tolerance. The notes simply
			indicate that we should use a fixed number of iterations of the
			golden section method and then use inverse polynomial interpolation
			to find the	final abscissa. That method would at least guarantee a
			certain	factor of reduction of the initial bracketing interval
			width, but there is very little assurance that the algorithm would
			converge. To make matters worse, some of the routines for
			multidimensional optimization that eventually depend on the line
			search routine need a nearly exact search to behave properly.</para>
		<para>One way to obtain convergence would be to exclusively use the
			golden section routine. I have tried this, and the number of
			function evaluations required is excessive. In addition, it does not
			involve inverse polynomial interpolation, so I feel it would violate
			the spirit of the assignment.</para>
		<para>So, I implemented Brent's method after reading the description in
			&#167; 10.2 of
			<olink targetdoc="self" targetptr="PTVFNRC"/>.
			I use inverse polynomial interpolation and the golden section
			method. The	routine is usually able to converge much faster than the
			golden section method alone. <xref linkend="Narrowing"/> has more
			information about the line search convergence.</para>
		<para>My bracketing routine is the same as the one given in class. It
			proceeds in a downhill direction until finding three points where
			the middle point has a lower ordinate than the other two.
			<xref linkend="Bracketing"/> has more information about the line
			search bracketing.</para>
		<para>The requested variable list is in
			<olink targetdoc="self" targetptr="Line_Search_Major_Variables"/>.
			Also, even though flow charts were only requested for the bracketing
			and narrowing routines, I provided an overall flow chart for the
			line search in <olink targetdoc="self" targetptr="pr_1_Unimodal_FindMinimum_flow_chart"/>.
			Finally, the entire source code for this routine along with most of
			the code for the class is available in
			<olink targetdoc="self" targetptr="Engineering_Optimization_Main_Code"/>.</para>
		<section xml:id="Calling_the_Line_Search">
			<title>Calling the Line Search</title>
			<para>The line search is called as follows from within Mathematica:
				<command>FindMinimum[f, {x, xleft, xright}, Method -> "Unimodal"]</command><footnote>
				<para>I have written this function three times. It was
					originally called FindUnimodalMinimum. Problems with the
					later constrained multidimensional optimization assignments
					prompted me to reprogram all my code from the top-down.
					While I was reprogramming, I used Mathematica's FindMinimum
					routine to handle the low-level line search. So, when I was
					ready to rewrite this routine again, I made it mostly
					conform to the calling style of FindMinimum, but it executes
					my code	when the option	Method &#8594; "Unimodal" is passed.
					This is important, because if one leaves off the Method
					statement, one of the built in methods, "Gradient",
					"ConjugateGradient", "QuasiNewton", "Newton", or 
					"LevenbergMarquardt", will be chosen automatically.</para></footnote>.
					The call variable list follows. A simple example of this
					calling	structure is given in
					<xref linkend="pr_1_xMinusTenSquared_qandaentry"/>.</para>
				<variablelist>
					<varlistentry>
						<term>f</term>
						<listitem>
							<para>f is a function of the independant variable,
								x in this case.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>x</term>
						<listitem>
							<para>x is the independant variable in f.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>xleft</term><term>xright</term>
						<listitem>
							<para>xleft and xright must be numbers such that
								<inlineequation><mathphrase>xleft &lt; xright</mathphrase></inlineequation>.
								They are the initial interval endpoints for the
								bracketing step.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term>Method</term>
						<listitem>
							<para>Method is an option that can be changed
								with a rule such as Method &#8594; "Unimodal".
								Using that rule causes Mathematica to execute my
								unimodal line search.</para>
						</listitem>
					</varlistentry>
				</variablelist>
		</section>
		<section xml:id="Bracketing">
			<title>Bracketing</title>
			<para>Assuming a one dimensional function is unimodal, its minimum
				may be bracketed by three points, {a,fa}, {b,fb}, and {c,fc}
				where the abscissas are related by <inlineequation><mathphrase>a &lt; b &lt; c</mathphrase></inlineequation>
				or <inlineequation><mathphrase>c &gt; b &gt; a</mathphrase></inlineequation>,
				while the ordinates are related by <inlineequation><mathphrase>fb &lt; fa</mathphrase></inlineequation>
				and <inlineequation><mathphrase>fb &lt; fc</mathphrase></inlineequation>.
				Because the notation is convenient, for the rest of the
				book I use the non-standard {ordinate,abscissa} way of writing
				a coordinate pair. In addition, all sets of ordinates are
				written as flat lists. So, the above coordinates are written
				{fa,a,fb,b,fc,c}. I call such a coordinate list a frame.</para>
			<para>Because the minimum could be contained within	the initial
				interval [a,c], a middle point, b, is chosen to make the first
				list of coordinates. If the conditions
				mentioned above hold, the minimum is already bracketed and the
				main bracketing routine isn't used. If the main routine is used,
				it follows the course of <xref linkend="pr_1_frameMinimum_flow_chart"/>.
				Please recall that the variable listing is given in
				<olink targetdoc="self" targetptr="Line_Search_Major_Variables"/></para>
			<figure xml:id="pr_1_frameMinimum_flow_chart">
				<title>Bracketing Minimum Flow Chart</title>
				<titleabbrev>Bracketing Minimum</titleabbrev>
				<screenshot>
					<mediaobject>
						<imageobject role="html">
							<imagedata
								fileref="mout/pr_1_frameMinimum_flow_chart.png"
								/>
						</imageobject>
						<imageobject role="fo">
							<imagedata
								fileref="mout/pr_1_frameMinimum_flow_chart.eps"
								/>
						</imageobject>
						<textobject>
							<xi:include href="Flow_Chart_Phrase.xml"/>							
						</textobject>
					</mediaobject>
				</screenshot>
				<caption>
					<para>On each iteration, a comparison for bracketing is
						made, along with other comparisons for necessary
						stopping conditions. If the stopping comparisons are
						false, the growthFactor is used to create a new frame,
						and a new iteration begins.</para>
				</caption>
			</figure>
		</section>
		<section xml:id="Narrowing">
			<title>Narrowing</title>
			<para><xref linkend="pr_1_frameMinimumNarrow_flow_chart"/> shows the
				flow chart for my narrowing routine, which follows Brent's
				method. The present inverse polynomial interpolation method is
				quadratic. <xref linkend="pr_1_perturb_flow_chart"/> shows the
				subroutine used to avoid evaluating the function too close to
				points at which it has already been evaluated. As stated in the
				introduction to	<xref linkend="Description_of_Line_Search"/>,
				this routine is	designed to converge to a specified tolerance.
				The termination	condition is that both a and c are within xtol
				from x. Forgive me one final reminder that the variable list for
				the entire line	search proceedure is located in
				<olink targetdoc="self" targetptr="Line_Search_Major_Variables"/>.</para>
			<figure xml:id="pr_1_frameMinimumNarrow_flow_chart">
				<title>Bracket Narrowing Flow Chart</title>
				<titleabbrev>Bracket Narrowing</titleabbrev>
				<screenshot>
					<mediaobject>
						<imageobject role="html">
							<imagedata
								fileref="mout/pr_1_frameMinimumNarrow_flow_chart.png"
							/>
						</imageobject>
						<imageobject role="fo">
							<imagedata
								fileref="mout/pr_1_frameMinimumNarrow_flow_chart.eps"
							/>
						</imageobject>
						<textobject>
							<xi:include href="Flow_Chart_Phrase.xml"/>							
						</textobject>
					</mediaobject>
				</screenshot>
				<caption>
					<para>On each iteration, a comparison for bracketing is
						made, along with other comparisons for necessary
						stopping conditions. If the stopping comparisons are
						false, the growthFactor is used to create a new frame,
						and a new iteration begins.</para>
				</caption>
			</figure>
			<figure xml:id="pr_1_perturb_flow_chart">
				<title>Perturbation Flow Chart</title>
				<titleabbrev>Perturbation</titleabbrev>
				<screenshot>
					<mediaobject>
						<imageobject role="html">
							<imagedata
								fileref="mout/pr_1_perturb_flow_chart.png"
							/>
						</imageobject>
						<imageobject role="fo">
							<imagedata
								fileref="mout/pr_1_perturb_flow_chart.eps"
							/>
						</imageobject>
						<textobject>
							<xi:include href="Flow_Chart_Phrase.xml"/>							
						</textobject>
					</mediaobject>
				</screenshot>
				<caption>
					<para>This is the "perturb abscissas" process from
						<xref linkend="pr_1_frameMinimumNarrow_flow_chart"/>.
						It goes over each abscissa in perturbed, moving it
						away from each abscissa in sameTestAbscissas.</para>
				</caption>
			</figure>
		</section>
	</section>
	<section xml:id="Line_Search_Problems">
		<title>Line Search Problems</title>
		<para>This section contains the assigned problems from project one.</para>
		<qandaset>
			<!--?dbhtml label-width="15%"?-->
			<qandaentry xml:id="pr_1_xMinusTenSquared_qandaentry">
				<question>
					<!--label>Minimize <xi:include href="mout/pr_1_xMinusTenSquared.xml"/></label-->
					<para>Test the program using <xi:include href="mout/pr_1_xMinusTenSquared.xml"/>.</para>
				</question>
				<answer>
					<para>The proper Mathematica command to invoke my unimodal
						line search is
						<command><xi:include href="mout/pr_1_optimize_xMinusTenSquared.m" parse="text"/></command>.
						The result is in the form
						<computeroutput>{fmin, {x -> xmin}}</computeroutput>,
						where fmin is the lowest function value found, x is the
						given independant variable, and xmin is the abscissa
						corresponding to the lowest function value. In this
						case, the output is
						<computeroutput><xi:include href="mout/pr_1_optimize_xMinusTenSquared_result.m" parse="text"/></computeroutput>,
						which is the correct answer.</para>
				</answer>
			</qandaentry>
			<qandaentry xml:id="pr_1_ex21_qandaentry">
				<question>
					<para>Example 2-1 in
						<olink targetdoc="self" targetptr="GNVNOTED"/>
						talks about a idealized beam leaning up
						against a smooth wall with a pin support at the floor.
						The beam is supports a vertical load P at the wall. The
						beam is of length L, cross sectional area A, Young's
						modulus E, and second area moment of inertia I about its
						neutral axis. The beam touches the wall at an inital
						height, H, from the floor when P is zero. As downward
						load P increases, the beam's contact point with the wall
						moves down a distance X. The axial force in the beam is
						F. Given the following equations, we are asked to solve
						for the maximum of P that the structure can support, as
						well as the two X locations at which P is equal to
						20,000 N.</para>
					 <xi:include href="mout/pr_1_ex21given.xml"/>
				</question>
				<answer>
					<para>Because they are long, I do not show the commands to
						solve the problem here but, you may find them in
						<olink targetdoc="self" targetptr="PR1_Code"/>. The
						requested solutions are found in
						<xref linkend="pr_1_ex21table"/> and
						<xref linkend="pr_1_ex21plot"/>.</para>
					<xi:include href="mout/pr_1_ex21table.xml"/>
					<xi:include href="mout/pr_1_ex21plot.xml"/>
				</answer>
			</qandaentry>
		</qandaset>
	</section>
</chapter>