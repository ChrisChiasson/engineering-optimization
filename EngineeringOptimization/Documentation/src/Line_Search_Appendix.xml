<?xml version="1.0" encoding="UTF-8"?>
<appendix xml:id="Line_Search_Appendix"
	xmlns="http://docbook.org/ns/docbook"
	xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xl="http://www.w3.org/1999/xlink"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	version="5">
	<title>Line Search &#x2014; Project 1</title>
	<titleabbrev>Line Search</titleabbrev>
	<para>This appendix contains companion material to <olink targetdoc="self"
		targetptr="Line_Search"/>.</para>
	<para>The overall <xref linkend="pr_1_Unimodal_FindMinimum_flow_chart"/>
		isn't as informative as the other charts nor was it requested in the
		assignment, but it is included here for completeness.
		<xref linkend="Line_Search_Major_Variables"/> list is also available.
		Finally, you will find problem calculations in
		<xref linkend="PR1_Code"/> at the end of this appendix.</para>
	<figure xml:id="pr_1_Unimodal_FindMinimum_flow_chart">
		<title>Line Search Flow Chart</title>
		<titleabbrev>Line Search</titleabbrev>
		<screenshot>
			<mediaobject>
				<imageobject role="html">
					<imagedata
						fileref="mout/pr_1_Unimodal_FindMinimum_flow_chart.png"
						/>
				</imageobject>
				<imageobject role="fo">
					<imagedata
						fileref="mout/pr_1_Unimodal_FindMinimum_flow_chart.eps"
						/>
				</imageobject>
				<textobject>
					<xi:include href="Flow_Chart_Phrase.xml"/>
				</textobject>
			</mediaobject>
		</screenshot>
		<caption>
			<para>This shows the massaging of data between stages, the reverse
				restart capability, and how the	minimum is selected.</para>
		</caption>
	</figure>
	<example xml:id="Line_Search_Major_Variables">
		<title>Line Search Major Variables</title>
		<para>Here is a list of all the major variables found within the
			line search flow charts.</para>
		<variablelist>
			<varlistentry>
				<term>f</term>
				<listitem>
					<para>f is a function of the independant variable. In
						the actual source code, f is named function.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>a</term><term>b</term><term>c</term><term>u</term>
				<term>v</term><term>w</term><term>x</term>
				<term>newAbscissa</term>
				<listitem>
					<para>These are abscissas at which the function is
						evaluated. Their respective corresponding ordinates are
						fa, fb, fc, fu, fv, fw, fx, and newOrdinate. The
						interval [a,c] always includes the other points. b is
						used as the middle abscissa in the bracketing routine. u
						records the location of the last evaluation in Brent's
						method. v, w, and x are the abscissas that correspond to
						the lowest thre ordinates found in Brent's method.
						newAbscissa is the point at which the present iteration
						will evaluate f.</para>
					<para>Sometimes, newAbscissa is a list with one or zero
						elements, depending on wether Brent's method needs to
						fall back on regular golden section steps instead of
						perturbed steps. However, newAbscissa is always
						transformed into a plain number before f is
						evaluated.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>accuracyGoal</term><term>precisionGoal</term>
				<listitem>
					<para>These are the respective number of digits of accuracy
						and precision within which we would like to obtain a
						correct answer. The definition of xtol (and ptol)
						should make it clear that these goals are not guaranteed
						to be satisfied because the two tolerances resulting
						from the goals are summed. accuracyGoal and
						precisionGoal may be set by the AccruacyGoal and
						PrecisionGoal options of the FindMinimum function:
						<command>FindMinimum[..., AccuracyGoal -> #A, PrecisionGoal -> #B]</command>.
						#A and #B are the desired number of digits of accuracy
						and precision. By default, accuracyGoal and
						precisionGoal are set to half of workingPrecision to
						avoid issues where numerical error prevents
						convergence.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>candidateAbscissa</term>
				<listitem>
					<para>Early in a narrowing iteration, candidateAbscissa is
						a list containing an inverse parabolic interpolation
						abscissa and a golden section abscissa. Sometimes, these
						guesses are too close to points that have been evaluated
						already. It is important to keep track of how far each
						abscissa is perturbed, because the perturbation distance
						of the abscissa that is eventually accepted as
						newAbscissa is the lower bound of
						maxAcceptableDisplacement for the next iteration.
						Therefore, I used a variable called perturbed to store
						the	abscissas that have been moved.</para>
					<para>For the determination of maxAcceptableDisplacement,
						newAbscissa and perturbed are used to find the
						position of candidateAbscissa that corresponds to the
						selected abscissa. candidateAbscissa is then assigned
						to the value of the element that matched, changing it
						from a list to a number.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>domainBound</term>
				<listitem>
					<para>A boolean variable that, when true, causes the
						termination of the bracketing routine and the
						issuance of an error message stating that the
						routine stopped on the edge of its domain.
						domainBound	is set to true when c is equal to either
						limitLeft or limitRight.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>fa</term><term>fb</term><term>fc</term><term>fu</term>
				<term>fv</term><term>fw</term><term>fx</term>
				<term>newOrdinate</term>				
				<listitem>
					<para>These are function (f), ordinates at a particular
						abscissa. Their respective corresponding abscissas are
						a, b, c, u, v, w, x, and newAbscissa.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>frameBound</term>
				<listitem>
					<para>A boolean variable that, when true, causes the
						termination of the bracketing routine. frameBound
						is set to true when fb is lower than fc.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>growthFactor</term>
				<listitem>
					<para>The growth factor is a (somewhat arbitrary) factor
						by which to grow the interval [b,c] on each bracketing
						iteration. It is typically chosen to be equal to the
						golden ratio, &#934;, from mathematics;
						<inlineequation><mathphrase>&#934; = growthFactor &#8773; 1.618</mathphrase></inlineequation>.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>iteration</term>
				<listitem>
					<para>In integer indicating the present iteration.
						Iteration is incremented for each function
						evaluation. It is reset to zero between the bracketing
						and narrowing routines.</para>
				</listitem>
			</varlistentry>				
			<varlistentry>
				<term>iterationBound</term>
				<listitem>
					<para>A boolean variable that, when true, causes the
						termination of the bracketing routine and the
						issuance of an error message stating that the
						routine stopped because it used too many iterations.
						iterationBound is set to true when iteration is
						equal to maxWideningIterations.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>limitLeft</term><term>limitRight</term>
				<listitem>
					<para>These are numbers that limit the minimum and
						maximum values of a and c. The default to the minimum
						and maximum machine number that can be represented
						in Mathematica, though the user can change them, as
						seen in EXAMPLE BLAH BLAH.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>maxAcceptableDisplacement</term>
				<listitem>
					<para>This is the maximum acceptable displacement from x for
						a perturbed abscissa in the narrowing routine. Any
						abscissa that would require a larger displacement is
						discarded.</para>
					<para>maxAcceptableDisplacement is determined by the
						previous iteration. It is the greater of half the
						displacement from x and the perturbation distance.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>maxNarrowingIterations</term>
				<listitem>
					<para>maxNarrowingIterations is analogous to
						maxWideningIterations. It controls the maximum number of
						iterations for the narrowing routine. Its' corresponding
						option is called "MaxWideningIterations".</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>maxWideningIterations</term>
				<listitem>
					<para>This indicates the maximum number of iterations
						allowed by the bracketing routine. It can be set by
						the	option "MaxWideningIterations" as in
						<command>FindMinimum[..., Method -> {"Unimodal", "MaxWideningIterations" -> #}]</command>,
						where # is the integer number of
						maxWideningIterations.</para>
					<para>If "MaxWideningIterations" is not set, it defaults
						to Automatic, where it will be set to half the value
						of the MaxIterations option of FindMinimum.
						MaxIterations has a default value of 100, so the
						default value of maxWideningIterations is 50.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>perturbed</term>
				<listitem>
					<para>This variable is initialized to be the same as
						candidateAbscissa at the beginning of the narrowing
						iteration. However, all of perturbed's abscissas are
						then moved away from the abscissas in sameTestAbscissas.
						A newAbscissa is subsequently selected from the
						perturbed abscissas that lie between a and c and
						that represent a displacement within
						maxAcceptableDisplacement from x. If no perturbed
						entries meet those conditions, then the unperturbed
						golden section method is used for newAbscissa. See
						candidateAbscissa's	description for more information.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>perturbFactor</term>
				<listitem>
					<para>This factor is a multiplier for in the perturbation
						routine whose present definition causes abscissas to be
						perturbed half the magnitude of ptol toward a or c 
						&#x2014; whichever endpoint is further from x.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>ptol</term>
				<listitem>
					<para>This is the minimum distance a possible new abscissa
						may be from any member of sameTestAbscissas. If the
						distance is less than the tolerance (ptol), the routine
						perturbs the possible abscissa away. The formula for
						the tolerance is
						<xi:include href="mout/pr_1_ptol.xml"/>, where # is the
						present value of an abscissa that may eventually become
						newAbscissa.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>reverse</term>
				<listitem>
					<para>reverse is a boolean variable that indicates wether
						the	direction search should occur in the opposite
						direction from normal. The "Reverse" option can be used
						to manually set the value of reverse, though there
						should not be a need to do so:
						<command>FindMinimum[..., Method -> {"Unimodal", "Reverse" -> bool}]</command>.
						bool is True or False. The line search will
						automatically issue a line search in the reverse
						direction if a minimum was not bracketed and reverse is
						False during the current search.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>sameTestAbscissas</term>
				<listitem>
					<para>This is a list containing every abscissa at which
						the function f has already been evaluated. Evaluating
						the function within the convergence tolerance to one of
						these points runs the risk of wasting the evaluation
						because the function will probably barely change over
						such a short distance.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>shrinkFactor</term>
				<listitem>
					<para>This is the interval width fraction of [a,x] or [x,c]
						&#x2014; whichever is larger &#x2014; into which the
						golden section method steps from x.</para>
					<para>There is some theoretical basis for the default value
						of the shrinkFactor use in the narrowing process. By
						default,
						<inlineequation><mathphrase>2 - &#934; = shrinkFactor &#8773; 0.382</mathphrase></inlineequation>.
						The default shrinkFactor can be determined analytically
						by constraining the two possible left over intervals
						from a new function evaluation to be of equal width and
						then assuming that the rule is applied at every
						iteration. By making sure that both possible leftover
						intervals are the same size, the default shrinkFactor
						does the best possible job with finding minima of
						un-cooperative functions. &#167; 10.2 of
						<olink targetdoc="self" targetptr="PTVFNRC"/>
						has a detailed derivation of this factor.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>vwxSequence</term>
				<listitem>
					<para>After the assignment of newOrdinate at newAbscissa in
						the narrowing routine, a procedure is used to select the
						lowest three coordinate pairs from all the points being
						tracked on that iteration. These three pairs, in order
						of decreasing ordinate, are assigned to vwxSequence. I
						realize the variable name should have been
						fvvfwwfxxSequence, but that was too cumbersome for my
						taste.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>workingPrecision</term>
				<listitem>
					<para>This is the number of digits of precision used for all
						calculations. It can be set by an option,
						WorkingPrecision, as follows:
						<command>FindMinimum[..., WorkingPrecision -> #]</command>.
						# is the desired number of digits of precision. The
						default value is $MachinePrecision, which is about
						15.9546.</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>xtol</term>
				<listitem>
					<para>This is the tolerance to which a and c must come from
						x for the narrowing routine to converge. The numerical
						definition for xtol is the same as for ptol, except that
						# should be replaced with x.</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</example>
	<example xml:id="PR1_Code">
		<?dbfo keep-together="auto"?>
		<title>Project 1 Code</title>
		<para>This is the code for the project 1 calculations.</para>
		<programlisting><xi:include href="mout/PR1.m" parse="text"/></programlisting>		
	</example>
</appendix>