graph         { flow: south; }
node.start    { shape: rounded; fill: #ffbfc9; }
node.question { shape: diamond; fill: #ffff8a; }
node.action   { shape: rounded; fill: #8bef91; }

[ Given: f, a, c,\nlimitLeft,\nlimitRight,\nreverse,\nshrinkFactor,\ngrowthFactor,\nmaxWideningIterations,\nmaxNarrowingIterations ] { class: start }
  --> [ {fa,fc} =\n{f(a),f(c)} ] {class: action; }
    --> [ if fc > fa ] { class: question; }
      -- then --> [ {fa,a,fc,c} =\n{fc,c,fa,a} ] { class: action; }
        --> [ if reverse ] { class: question; }
	  -- then --> [ {fc,c,fa,a} =\n{fa,a,fc,c} ] { class: action; }
	    --> [ b = c + shrinkFactor*(a-c) ] { class: action; }
	      --> [ fb = f(b) ] { class: action; }
	        --> [ iteration = 1 ] { class: action; }
		  --> [ if fc > fb ] { class: question; }
		    -- then --> [ frameBound = True ] { class: action; }
		      --> [ cdomain ] { class: question; label: if Or(c == limitLeft,\nc == limitRight); }
		        -- then --> [ domainBound = True ] { class: action; }
			  --> [ if iteration ==\nmaxWideningIterations ] { class: question; }
			    -- then --> [ iterationBound = True ] { class: action; }
			      --> [ frameMinimumStopTest ] { class: question; label: if Or(frameBound,\ndomainBound,\niterationBound); }
			        -- then --> [ if And(Not(frameBound,\nNot(reverse)) ] { class: question; }
				  -- then --> [ Sow (a.k.a. store)\nthe results of running\nthis algorithm with\nreverse = False ] { class: action; }
				    --> [something]

[ if fc > fa ]
   -- else --> [ if reverse ]

[ if reverse ]
  -- else --> [ b = c + shrinkFactor*(a-c) ]

[ if fc > fb ]
  -- else --> [ cdomain ]
    -- else --> [ if iteration ==\nmaxWideningIterations ]
      -- else --> [ frameMinimumStopTest ]
        -- else --> [ newAbscissa = c + growthFactor*(c-b) ] { class: action; }
	  --> [ if newAbscissa <=\nlowerLimit ] { class: question; }
	    -- then --> [ newAbscissa = lowerLimit ] { class: action; }
	      --> [ if newAbscissa >=\nupperLimit ] { class: question; }
	        -- then --> [ newAbscissa = upperLimit ] { class: action; }
		  --> [ iteration++ ] { class: action; }
		    --> [ newOrdinate =\nf(newAbscissa) ] { class: action; }
		      --> [ {fa,a,fb,b,fc,c} =\n{fb,b,fc,c,newOrdinate,newAbscissa} ] { class: action; }
		        --> [ if fc > fb ]


[ if newAbscissa <=\nlowerLimit ]
  -- else --> [ if newAbscissa >=\nupperLimit ]
    -- else --> [ iteration++ ]

[ if And(Not(frameBound,\nNot(reverse)) ]
  -- else --> [something]